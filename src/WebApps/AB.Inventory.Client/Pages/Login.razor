@page "/login"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using AB.Inventory.Application.Authentication.Commands
@using AB.Inventory.Client.Models.Authentication

<PageTitle>Admin Login</PageTitle>

<MudGrid Justify="Justify.Center">
    <MudItem xs="12" sm="4">
        <MudPaper Class="pa-4">
            <MudForm Model="@model" @bind-IsValid="@success">

                <MudTextField @bind-Value="model.Username"
                              T="string"
                              Label="Email"
                              Required="true"
                              RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
                <MudTextField @bind-Value="model.Password"
                              T="string"
                              Label="Password"
                              HelperText="Enter Password"
                              InputType="InputType.Password"
                              Required="true"
                              RequiredError="Password is required!" />
                <div class="d-flex align-center justify-space-between mt-6">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="LoginAsAdmin"
                               Class="ml-auto">Login</MudButton>

                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {

    LoginModel model = new LoginModel() { Username = "", Password = "" };
    bool success;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task LoginAsAdmin()
    {
        try
        {
            var result = await _mediator.Send(new LoginCommand() { Username = model.Username, Password = model.Password });
            var timer = new Timer(new TimerCallback(_ =>
            {
                _navigationManager.NavigateTo("", forceLoad: true);
            }), null, 500, 500);
        }
        catch (Exception)
        {
            _snackbar.Add("Invalid Username or Password", Severity.Error);
        }
    }
}