@using System.Timers
@using AB.Inventory.Application.Authentication.Commands
@using AB.Inventory.Application.Authentication.Models
@inherits LayoutComponentBase
@inject NavigationManager UriHelper
@inject IJSRuntime JSRuntime
@inject IMediator mediator

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
                       OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        @* Switch Language:
        <MudRadioGroup T="string" @bind-SelectedOption="@languageCode" @onclick="@(async ()=> await ChangeLanguage())">
        @foreach (var item in languages)
        {
        <MudRadio Option="@item.Code">@item.Name</MudRadio>
        }
        </MudRadioGroup>*@
        @*<MudIconButton Icon="@(Icons.Sharp.LocalHospital)" Color="Color.Inherit" Link="https://epa.expertfolio.nl/"
        Target="_blank" Title="EPA" />*@
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-3 pt-3">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;
    Timer timerObj = new Timer(1000);

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        // Set the Timer delay.
        timerObj = new Timer(1000);
        timerObj.Elapsed += UpdateTimer;
        timerObj.AutoReset = false;
        // Identify whether the user is active or inactive using onmousemove and onkeypress in JS function.
        await JSRuntime.InvokeVoidAsync("timeOutCall", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public void TimerInterval()
    {
        // Resetting the Timer if the user in active state.
        timerObj.Stop();
        // Call the TimeInterval to logout when the user is inactive.
        timerObj.Start();
    }

    private void UpdateTimer(object source, ElapsedEventArgs e)
    {
        InvokeAsync(async () =>
        {
            var token = await _localStorageService.GetItemAsync<UserTokenModel>("user");

            if (token != null && token.Expiration < DateTime.UtcNow)
            {
                await _localStorageService.RemoveItemAsync("user");
                await _localStorageService.RemoveItemAsync("info");

                var refreshToken = await mediator.Send(new RefreshTokenCommand()
                    {
                        RefreshToken = token.RefreshToken,
                        Token = token.Token,
                    });

                if (refreshToken != null)
                {
                    UriHelper.NavigateTo("/", true);
                }
                await InvokeAsync(StateHasChanged);
            }
        });
    }
}